<?php

namespace Plugin\DPost\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProductPostQueueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductPostQueueRepository extends EntityRepository
{
    public $app;

    public function setApplication($app) {
        $this->app = $app;
    }

    public function getProductList($queue_status = 0) {

        $col = "";
        $col .= "pp.product_id";
        $col .= ",p.name";
        $col .= ",count(pp.product_id) pcount";

        $where = "";
        $where .= "p.del_flg = 0";
        $where .= " and pp.queue_status = :queue_status";

        $groupBy = "";
        $groupBy .= "pp.product_id, p.name";

        $sort = "";
        $sort .= "pp.product_id";


        $qb = $this->createQueryBuilder('pp')
                ->select($col)
                ->innerJoin('pp.Product', 'p')
                ->where($where)
                ->groupBy($groupBy)
                ->orderBy($sort)
                ->setParameter(':queue_status', $queue_status);

        return $qb->getQuery()->getResult();
    }

    public function getSingleResult($regist_id, $product_id) {

        $qb = $this->getSingleResultQB($regist_id, $product_id);

        $ProductPostQueues = $qb->getQuery()->getResult();

        return $ProductPostQueues;
    }

    private function getSingleResultQB($regist_id, $product_id) {

        $where = "";
        $where .= "pp.queue_status in (0, 1)";
        $where .= " and pp.product_id = :product_id";
        $where .= " and pp.regist_id = :regist_id";

        $qb = $this->createQueryBuilder('pp')
                ->where($where)
                ->setParameter(':product_id', $product_id)
                ->setParameter(':regist_id', $regist_id);

        return $qb;
    }

    public function getRegistList($product_id) {

        $where = "";
        $where .= "pp.queue_status = 1";
        $where .= " and pp.product_id = :product_id";

        $qb = $this->createQueryBuilder('pp')
                ->where($where)
                ->setParameter(':product_id', $product_id);

        return $qb->getQuery()->getResult();
    }

    public function getClickCount($product_id) {

        $qb = $this->createQueryBuilder('pq')
                ->select('count(pq.product_post_id)')
                ->where('pq.queue_status = 4 and pq.product_id = :product_id')
                ->setParameter(':product_id', $product_id);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getRegistIdCount($regist_id) {

        $where = "";
        $where .= "pp.queue_status in (0, 1)";
        $where .= " and pp.regist_id = :regist_id";

        $qb = $this->createQueryBuilder('pp')
                ->select('count(pp.product_post_id)')
                ->where($where)
                ->setParameter(':regist_id', $regist_id);

        return $qb->getQuery()->getSingleScalarResult();
    }
}
